const express = require('express');
const auth = require('../../middlewares/auth');
const validate = require('../../middlewares/validate');
const savedPasswordValidation = require('../../validations/savedPassword.validation');
const savedPasswordController = require('../../controllers/savedPassword.controller');

const router = express.Router();

router
  .route('/')
  .post(auth('managePassword'), validate(savedPasswordValidation.createPassword), savedPasswordController.createPassword)
  .get(auth('getPassword'), validate(savedPasswordValidation.getAllPasswords), savedPasswordController.getAllPasswords);

router
  .route('/:passwordId')
  .get(auth('getPassword'), validate(savedPasswordValidation.getPassword), savedPasswordController.getPassword)
  .patch(auth('managePassword'), validate(savedPasswordValidation.updatePassword), savedPasswordController.updatePassword)
  .delete(auth('managePassword'), validate(savedPasswordValidation.deletePassword), savedPasswordController.deletePassword);

  router
  .route('/show-password/:passwordId')
  .get(auth('getPassword'), validate(savedPasswordValidation.showPassword), savedPasswordController.showPassword)

module.exports = router;

/**
 * @swagger
 * tags:
 *   name: Saved Passwords
 *   description: Saved Password management and retrieval
 */

/**
 * @swagger
 * /passwords:
 *   post:
 *     summary: Save a Password 
 *     description: admins and user can save password.
 *     tags: [Saved Passwords]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - site
 *               - username
 *               - password
 *             properties:
 *               site:
 *                 type: string
 *               username:
 *                 type: string
 *               password:
 *                 type: string
 *                 description: password generated by password-generator
 *             example:
 *               site: site URL
 *               username: fake@example.com
 *               password: password1
 *     responses:
 *       "201":
 *         description: Created
 *         content:
 *           application/json:
 *             schema:
 *                $ref: '#/components/schemas/SavedPassword'
 *       "400":
 *         $ref: '#/components/responses/DuplicateEmail'
 *       "401":
 *         $ref: '#/components/responses/Unauthorized'
 *       "403":
 *         $ref: '#/components/responses/Forbidden'
 *
 *   get:
 *     summary: Get all Saved Password
 *     description: admins and user can retrieve all there saved password.
 *     tags: [Saved Passwords]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: site
 *         schema:
 *           type: string
 *         description: site URL or site name
 *       - in: query
 *         name: username
 *         schema:
 *           type: string
 *         description: User name or email
 *       - in: query
 *         name: sortBy
 *         schema:
 *           type: string
 *         description: sort by query in the form of field:desc/asc (ex. name:asc)
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           minimum: 1
 *         default: 10
 *         description: Maximum number of users
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           minimum: 1
 *           default: 1
 *         description: Page number
 *     responses:
 *       "200":
 *         description: OK
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 results:
 *                   type: array
 *                   items:
 *                     $ref: '#/components/schemas/SavedPassword'
 *                 page:
 *                   type: integer
 *                   example: 1
 *                 limit:
 *                   type: integer
 *                   example: 10
 *                 totalPages:
 *                   type: integer
 *                   example: 1
 *                 totalResults:
 *                   type: integer
 *                   example: 1
 *       "401":
 *         $ref: '#/components/responses/Unauthorized'
 *       "403":
 *         $ref: '#/components/responses/Forbidden'
 */

/**
 * @swagger
 * /passwords/show-password/{id}:
 *   get:
 *     summary: Show a Saved Password
 *     description: Logged in users can only see their own Saved Passwords.
 *     tags: [Saved Passwords]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: Password id
 *     responses:
 *       "200":
 *         description: OK
 *         content:
 *           application/json:
 *             schema:
 *                $ref: '#/components/schemas/ShowSavedPassword'
 *       "401":
 *         $ref: '#/components/responses/Unauthorized'
 *       "403":
 *         $ref: '#/components/responses/Forbidden'
 *       "404":
 *         $ref: '#/components/responses/NotFound'
 */

/**
 * @swagger
 * /passwords/{id}:
 *   get:
 *     summary: Get a Saved Password
 *     description: Logged in users can fetch only their own Saved Passwords.
 *     tags: [Saved Passwords]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: Password id
 *     responses:
 *       "200":
 *         description: OK
 *         content:
 *           application/json:
 *             schema:
 *                $ref: '#/components/schemas/SavedPassword'
 *       "401":
 *         $ref: '#/components/responses/Unauthorized'
 *       "403":
 *         $ref: '#/components/responses/Forbidden'
 *       "404":
 *         $ref: '#/components/responses/NotFound'
 *
 *   patch:
 *     summary: Update a Saved Password
 *     description: Logged in users can only update their own Saved Password.
 *     tags: [Saved Passwords]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: Password id
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               site:
 *                 type: string
 *               username:
 *                 type: string
 *               password:
 *                 type: string
 *                 description: password generated by password-generator
 *             example:
 *               site: site URL
 *               username: fake@example.com
 *               password: password1
 *     responses:
 *       "200":
 *         description: OK
 *         content:
 *           application/json:
 *             schema:
 *                $ref: '#/components/schemas/SavedPassword'
 *       "400":
 *         $ref: '#/components/responses/DuplicateEmail'
 *       "401":
 *         $ref: '#/components/responses/Unauthorized'
 *       "403":
 *         $ref: '#/components/responses/Forbidden'
 *       "404":
 *         $ref: '#/components/responses/NotFound'
 *
 *   delete:
 *     summary: Delete a Saved Password
 *     description: Logged in users can delete only there Saved Password.
 *     tags: [Saved Passwords]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: Password id
 *     responses:
 *       "200":
 *         description: No content
 *       "401":
 *         $ref: '#/components/responses/Unauthorized'
 *       "403":
 *         $ref: '#/components/responses/Forbidden'
 *       "404":
 *         $ref: '#/components/responses/NotFound'
 */
